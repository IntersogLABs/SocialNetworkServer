var ObjectId = require('mongodb').ObjectID;
var async = require('async');

module.exports=function(app){
    app.post('/user/:id/wall',function(req,res){
        if(!req.body.content){
            res.status(400).send({message:'content required'})
            return;
        }
        var post = {
            content:req.body.content,
            authorId:{$ref:"users", _id: req.currentUser._id},
            ownerId:{$ref:"users", _id: req.params.id}
        };
        DB.collection('posts').insert(post, function(err, data){
            res.send(data);
        })
    })  
    app.get('/post',function(req,res){
        DB.collection('posts').find({}).toArray(function(err,posts) {
            var follow=req.currentUser.following;
            for(var i=0;i<posts.length;i++) {
                var flag=true;
                for(var j=0, len=follow.length;j<len;j++) {
                    if(String(posts[i].authorId._id)==follow[j] || posts[i].ownerId._id==follow[j]) 
                        flag=false;
                    if(j==len-1 && flag) {posts.splice(i,1);  i--;}
                }
            }
            var usersCollection=DB.collection('users');
            async.mapLimit(posts,5,function(post, next){
                usersCollection.findOne({_id: new ObjectId(post.ownerId._id)}, function(err, data) {
                    delete data.pwd;
                    delete data.follow;
                    delete data.email;
                    post.owner=data;
                })
                usersCollection.findOne({_id:new ObjectId(post.authorId._id)}, function(err, data) {
                    delete data.pwd;
                    delete data.follow;
                    delete data.email;
                    post.author=data;
                    next(null, post);
                })
            }, function(err, data) {
                var result={info:data};
                res.send(result);
            })
        })
    })  
    app.get('/posts/:id',function(req,res){
        DB.collection('posts').findOne({_id: new ObjectId(req.params.id)}, function(err, post) {
            if(!post){
                res.status(404).send({message:"not found"})
                return;
            }
            res.send(post)
        })
    }) 
    app.delete('/posts/:id',function(req,res){
        DB.collection('posts').findOne({_id: new ObjectId(req.params.id)}, function(err, post) {
            if(!post){
                res.status(404).send({message:"not found"})
                return;
            }
            if(String(req.currentUser._id) != String(post.ownerId._id) &&  
                String(req.currentUser._id) != String(post.authorId._id)) {
                res.status(400).send({message:"don't have enough rights to delete post"})
                return;
            }
            DB.collection('posts').remove({"_id":post._id});
            res.send(post);
        })
    })
    app.put('/posts/:id', function (req, res) {
       DB.collection('posts').findOne({_id: new ObjectId(req.params.id)}, function(err, post) {
            if(String(req.currentUser._id) != String(post.authorId._id)) {
                res.status(400).send({message:"don't have enough rights to change post"})
                return;
            }
            console.log(post);
            DB.collection('posts').update({"_id": post._id},{$set:{content:req.body.content}});
            res.send("Ok");
        }) 
    })
}